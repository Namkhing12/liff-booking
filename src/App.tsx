import { useEffect, useState } from 'react'
import { supabase } from './supabase'
import { initLiff } from './liffInit'
import liff from '@line/liff'
import './App.css'

function App() {
  const [name, setName] = useState('')
  const [phone, setPhone] = useState('')
  const [date, setDate] = useState('')      // YYYY-MM-DD
  const [time, setTime] = useState('')      // HH:mm (ui)
  const [symptom, setSymptom] = useState('')
  const [loading, setLoading] = useState(false)

  // ‡∏£‡∏≠ init LIFF ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
  useEffect(() => {
    (async () => {
      try {
        await initLiff()
        if (!liff.isLoggedIn()) {
          liff.login()
        }
      } catch (err) {
        console.error('LIFF init error:', err)
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° LIFF ‡πÑ‡∏î‡πâ')
      }
    })()
  }, [])

  const generateTimeSlots = () => {
    const times: string[] = []
    for (let hour = 8; hour <= 17; hour++) {
      times.push(`${hour.toString().padStart(2, '0')}:00`)
      times.push(`${hour.toString().padStart(2, '0')}:30`)
    }
    return times
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TIME ‡∏Ç‡∏≠‡∏á Postgres (HH:mm:ss)
  const toDbTime = (t: string) => (t && t.length === 5 ? `${t}:00` : t)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (loading) return
    setLoading(true)

    try {
      // trim ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
      const _name = name.trim()
      const _phone = phone.trim()
      const _date = date.trim()
      const _time = toDbTime(time.trim())
      const _symptom = symptom.trim()

      if (!_name || !_phone || !_date || !_time || !_symptom) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö')
        return
      }

      // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      if (!liff.isLoggedIn()) {
        liff.login()
        return
      }

      let lineId = ''
      try {
        const profile = await liff.getProfile()
        lineId = profile.userId
      } catch (err) {
        console.error('LIFF getProfile error:', err)
        // ‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE ‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡∏à‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å LINE ID)')
      }

      // 1) ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≥ (count + head)
      const { error: checkErr, count } = await supabase
        .from('appointments')
        .select('id', { count: 'exact', head: true })
        .eq('date', _date)     // ‡∏ñ‡πâ‡∏≤ column ‡πÄ‡∏õ‡πá‡∏ô DATE
        .eq('time', _time)     // ‡∏ñ‡πâ‡∏≤ column ‡πÄ‡∏õ‡πá‡∏ô TIME ‚Üí ‡∏ï‡πâ‡∏≠‡∏á HH:mm:ss

      if (checkErr) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å PostgREST
        const msg = (checkErr as any)?.message || JSON.stringify(checkErr)
        console.error('Supabase select error:', checkErr)
        alert(`‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${msg}`)
        return
      }

      if ((count ?? 0) > 0) {
        alert('‚õî ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô')
        return
      }

      // 2) Insert
      const { error: insertErr } = await supabase.from('appointments').insert([
        { name: _name, phone: _phone, date: _date, time: _time, symptom: _symptom, line_id: lineId || null },
      ])

      if (insertErr) {
        const code = (insertErr as any)?.code
        if (code === '23505') {
          // unique(date,time)
          alert('‚õî ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏ô‡∏à‡∏≠‡∏á‡∏û‡∏≠‡∏î‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô')
          return
        }
        const msg = (insertErr as any)?.message || JSON.stringify(insertErr)
        console.error('Supabase insert error:', insertErr)
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${msg}`)
        return
      }

      // 3) ‡∏¢‡∏¥‡∏á Google Apps Script
      const response = await fetch(
        'https://script.google.com/macros/s/AKfycbxs1LqDpES8OxbzyoDz1as7qDp3qbFj10sLrLESlrpp7A_BewLpnNGgho681OBtvWAm1A/exec',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: _name, date: _date, time: _time, symptom: _symptom }),
        }
      )

      if (!response.ok) {
        const text = await response.text().catch(() => '')
        throw new Error(`Google Apps Script error: ${text || response.status}`)
      }

      // 4) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô LINE + ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
      try {
        await liff.sendMessages([
          {
            type: 'text',
            text: `‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüë§ ‡∏ä‡∏∑‡πà‡∏≠: ${_name}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_date}\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: ${time}\nüìã ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ${_symptom}`,
          },
        ])
      } catch (err) {
        console.warn('sendMessages failed (‡πÑ‡∏°‡πà‡∏ß‡∏¥‡∏Å‡∏§‡∏ï):', err)
      }
      liff.closeWindow()
    } catch (err: any) {
      console.error(err)
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err?.message ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="booking-container">
      <div className="form-card">
        <h2>‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
            <input value={name} onChange={(e) => setName(e.target.value)} required />
          </div>

          <div className="form-group">
            <label>üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</label>
            <input
              type="tel"
              value={phone}
              onChange={(e) => setPhone(e.target.value.replace(/\D/g, ''))}
              pattern="[0-9]*"
              inputMode="numeric"
              required
            />
          </div>

          <div className="form-group">
            <label>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
            <input type="date" value={date} onChange={(e) => setDate(e.target.value)} required />
          </div>

          <div className="form-group">
            <label>üïí ‡πÄ‡∏ß‡∏•‡∏≤:</label>
            <select value={time} onChange={(e) => setTime(e.target.value)} required>
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ --</option>
              {generateTimeSlots().map((slot) => (
                <option key={slot} value={slot}>
                  {slot}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>üí¨ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:</label>
            <textarea value={symptom} onChange={(e) => setSymptom(e.target.value)} required />
          </div>

          <button className="btn-submit" type="submit" disabled={loading}>
            {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏á‚Ä¶' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'}
          </button>
        </form>
      </div>
    </div>
  )
}

export default App
