import { useEffect, useState } from 'react'
import { supabase } from './supabase'
import { initLiff } from './liffInit'
import liff from '@line/liff'
import './App.css'

function App() {
  const [name, setName] = useState('')
  const [phone, setPhone] = useState('')
  const [date, setDate] = useState('')
  const [time, setTime] = useState('')
  const [symptom, setSymptom] = useState('')
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    (async () => {
      try {
        await initLiff()
        if (!liff.isLoggedIn()) {
          liff.login()
        }
      } catch (err) {
        console.error('LIFF init error:', err)
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° LIFF ‡πÑ‡∏î‡πâ')
      }
    })()
  }, [])

  const generateTimeSlots = () => {
    const times: string[] = []
    for (let hour = 8; hour <= 17; hour++) {
      times.push(`${hour.toString().padStart(2, '0')}:00`)
      times.push(`${hour.toString().padStart(2, '0')}:30`)
    }
    return times
  }

  // ‡πÅ‡∏õ‡∏•‡∏á "11:00" -> "11:00:00"
  const toDbTime = (t: string) => (t && t.length === 5 ? `${t}:00` : t)

  // ‡∏£‡∏ß‡∏° date + time -> ISO string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scheduled_at
  const toScheduledAt = (d: string, t: string) => `${d}T${toDbTime(t)}`

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (loading) return
    setLoading(true)

    try {
      const _name = name.trim()
      const _phone = phone.trim()
      const _date = date.trim()
      const _time = time.trim()
      const _symptom = symptom.trim()

      if (!_name || !_phone || !_date || !_time || !_symptom) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö')
        return
      }

      if (!liff.isLoggedIn()) {
        liff.login()
        return
      }

      try {
        await liff.getProfile()
      } catch (err) {
        console.error('LIFF getProfile error:', err)
      }

      const scheduledAt = toScheduledAt(_date, _time) // e.g. 2025-09-05T11:00:00

      // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≥
      const { count, error: checkErr } = await supabase
        .from('appointments')
        .select('id', { count: 'exact', head: true })
        .eq('scheduled_at', scheduledAt)

      if (checkErr) {
        console.error('Supabase select error:', checkErr)
        alert(`‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${checkErr.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`)
        return
      }
      if ((count ?? 0) > 0) {
        alert('‚õî ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô')
        return
      }

      // 2) insert (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á)
      const { error: insertErr } = await supabase.from('appointments').insert([
        {
          patient_name: _name,
          scheduled_at: scheduledAt,
          chief_complaint: _symptom,
          // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö phone ‡πÉ‡∏ô DB ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
          // phone: _phone,
        },
      ])

      if (insertErr) {
        console.error('Supabase insert error:', insertErr)
        if ((insertErr as any).code === '23505') {
          alert('‚õî ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏ô‡∏à‡∏≠‡∏á‡∏û‡∏≠‡∏î‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô')
        } else {
          alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${insertErr.message || ''}`)
        }
        return
      }

      // 3) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Apps Script
      const response = await fetch(
        'https://script.google.com/macros/s/AKfycbxs1LqDpES8OxbzyoDz1as7qDp3qbFj10sLrLESlrpp7A_BewLpnNGgho681OBtvWAm1A/exec',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: _name,
            phone: _phone,
            date: _date,
            time: toDbTime(_time),
            symptom: _symptom,
          }),
        }
      )

      if (!response.ok) {
        const text = await response.text().catch(() => '')
        throw new Error(`Google Apps Script error: ${text || response.status}`)
      }

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÅ‡∏ó‡∏ô‡∏™‡πà‡∏á LINE)
      alert(
        `‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüë§ ‡∏ä‡∏∑‡πà‡∏≠: ${_name}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_date}\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: ${_time}\nüìã ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ${_symptom}`
      )

      liff.closeWindow()
    } catch (err: any) {
      console.error('Unexpected error:', err)
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err?.message ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="booking-container">
      <div className="form-card">
        <h2>‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
            <input
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</label>
            <input
              type="tel"
              value={phone}
              onChange={(e) => setPhone(e.target.value.replace(/\D/g, ''))}
              pattern="[0-9]*"
              inputMode="numeric"
              required
            />
          </div>

          <div className="form-group">
            <label>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
            <input
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>üïí ‡πÄ‡∏ß‡∏•‡∏≤:</label>
            <select
              value={time}
              onChange={(e) => setTime(e.target.value)}
              required
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ --</option>
              {generateTimeSlots().map((slot) => (
                <option key={slot} value={slot}>
                  {slot}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>üí¨ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:</label>
            <textarea
              value={symptom}
              onChange={(e) => setSymptom(e.target.value)}
              required
            />
          </div>

          <button className="btn-submit" type="submit" disabled={loading}>
            {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏á‚Ä¶' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'}
          </button>
        </form>
      </div>
    </div>
  )
}

export default App
